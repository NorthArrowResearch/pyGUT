#set your local working directory:
localdir='E:\\GitHub\\PyGUT\\SupportingTools'
#folder where all the data is contained
Datapath=paste(localdir,"ExampleData\\VisitData",sep="\\")
#folder where you want your output summary data to go
Metricpath=paste(localdir,"ExampleData\\Metrics",sep="\\")
#folder containing the scripts which run the summaries
Scriptpath=paste(localdir,"GUTsummary", sep="\\")
#folder where you want any output figures to go
figdir=paste(localdir, "ExampleData\\Figures", sep="\\")
GUTrunlist=list.dirs(Datapath)[grep("Run",list.dirs(Datapath))]
GUTrunlist
source(paste(Scriptpath, "/makesiteGUTmetrics.R", sep=""))
source(paste(Scriptpath, "/intersectpts.R", sep=""))
source(paste(Scriptpath, "extractvisitfrompath.R", sep="/"))
GUTrunlist
source(paste(Scriptpath, "extractvisitfrompath.R", sep="/"))
GUTrunlist[1]
GUTrunpath(GUTrunlist[1])
GUTrunpath=GUTrunlist[1]
GUTrunpath
strsplit(GUTrunpath, Output)
strsplit(GUTrunpath, "Output")
strsplit(GUTrunpath, visit)[[1]][1]
GUTpath=strsplit(GUTrunpath, "Output")[[1]][1]
GUTpath
Bankfullpath=paste(GUTpath,"Inputs\\Bankfull.shp", sep="")
WaterExtentpath=paste(GUTpath,"Inputs\\WaterExtent.shp", sep="")
ChampThalwegpath=paste(GUTpath,"Inputs\\Thalweg.shp", sep="")
Thalwegspath=paste(GUTpath,"Inputs\\Thalwegs.shp", sep="")
source(paste(Scriptpath, "/makesiteGUTmetrics.R", sep=""))
getwd()
setwd("E:/GitHub/PyGUT/SupportingTools/GUTsummary")
Run="Run_01"  #Specify which GUT run you want to summarize.
GUTrunlist=list.dirs(Datapath)[grep(Run,list.dirs(Datapath))]
GUTrunlist
source(paste(Scriptpath, "/makesiteGUTmetrics.R", sep=""))
source(paste(Scriptpath, "/intersectpts.R", sep=""))
layer="Tier2_InChannel" #other options include Tier3_InChannel or any other output files
for (i in c(1:length(GUTrunlist))){
#for (i in runlist){
print(i)
v=makesiteGUTmetrics(GUTrunlist[i], layer=paste(layer, ".shp",sep=""))
if (i==1){metrics=v} else {metrics=rbind(metrics,v)}
}
metrics
rownames(metrics)=seq(1,length(GUTrunlist))
metrics1=as.data.frame(metrics)
metrics1
write.csv(metrics1, paste(Metricpath, "\\siteGUTmetrics_", Run, layer, ".csv" ,sep=""))
write.csv(metrics1, paste(Metricpath, "\\siteGUTmetrics_", Run, layer, ".csv" ,sep="", row.names=F))
write.csv(metrics1, paste(Metricpath, "\\siteGUTmetrics_", Run, layer, ".csv" ,sep="", row.names=F))
write.csv(metrics1, paste(Metricpath, "\\siteGUTmetrics_", Run, layer, ".csv" ,sep=""), row.names=F))
write.csv(metrics1, paste(Metricpath, "\\siteGUTmetrics_", Run, layer, ".csv" ,sep=""), row.names=F)
"Tier2" %in% layer
layer
layer
grep("Tier2",layer)
grep("Tier2",layer)
help(grep)
grep("Tier3",layer)
if(grep("Tier2",layer)==1 | attribute=="UnitForm"){
unitcats=c("Pocket Pool", "Pool", "Pond", "Margin Attached Bar", "Mid Channel Bar" ,
"Riffle", "Cascade", "Rapid", "Run-Glide", "Chute", "Transition", "Bank")
unitcolors=  GU.colors=c(`Pocket Pool`="light blue", Pool="royalblue", Pond="dark green", `Margin Attached Bar`="darkred", `Mid Channel Bar`="brown2" ,
Riffle="orange2", Cascade="pink", Rapid="green", Chute="aquamarine" ,
`Glide-Run`="khaki1", Transition="grey90", Bank="grey10")
}
attribute="UnitForm" #Specify the field name of the GUT field you are wanting to summarize over
source(paste(Scriptpath, "/makeGUTmaps.R", sep=""))
source(paste(Scriptpath, "/makeGUTmaps.R", sep=""))
for (i in c(1:length(GUTrunlist))){
#for (i in runlist){
print(i)
v=makesiteGUTmetrics(GUTrunlist[i], layer, figdir, colors=unitcolors, plotthalweg=T, plotthalwegs=T, plotcontour=T))
if (i==1){metrics=v} else {metrics=rbind(metrics,v)}
}
for (i in c(1:length(GUTrunlist))){
#for (i in runlist){
print(i)
makeGUTmaps(GUTrunlist[i], layer, figdir, colors=unitcolors, plotthalweg=T, plotthalwegs=T, plotcontour=T)
}
source(paste(Scriptpath, "/makeGUTmaps.R", sep=""))
makeGUTmaps(GUTrunlist[i], layer, figdir, colors=unitcolors, plotthalweg=T, plotthalwegs=T, plotcontour=T)
makeGUTmaps(GUTrunlist[i], layer, figdir, unitcolors=unitcolors, plotthalweg=T, plotthalwegs=T, plotcontour=T)
source(paste(Scriptpath, "/makeGUTmaps.R", sep=""))
makeGUTmaps(GUTrunlist[i], layer, figdir, unitcolors=unitcolors, plotthalweg=T, plotthalwegs=T, plotcontour=T)
if(grep("Tier3",layer)==1 | attribute=="GU"){
unitcats=c("Saddle", "Bowl","Mound","Plane", "Trough",
"Bowl Transition", "Mound Transition")
unitcolors=c(Bowl="royalblue",Mound="darkred",Plane="khaki1",Saddle="orange2",Trough="lightblue",Wall= "grey10",
`Bowl Transition`="aquamarine", `Mound Transition`="pink")
}
if(grep("Tier2",layer)==1 | attribute=="UnitForm"){
unitcats=c("Pocket Pool", "Pool", "Pond", "Margin Attached Bar", "Mid Channel Bar" ,
"Riffle", "Cascade", "Rapid", "Run-Glide", "Chute", "Transition", "Bank")
unitcolors=c(`Pocket Pool`="light blue", Pool="royalblue", Pond="dark green", `Margin Attached Bar`="darkred", `Mid Channel Bar`="brown2" ,
Riffle="orange2", Cascade="pink", Rapid="green", Chute="aquamarine" ,
`Glide-Run`="khaki1", Transition="grey90", Bank="grey10")
}
unitcolors
if(grep("Tier2",layer)==1 | attribute=="GU"){
unitcats=c("Saddle", "Bowl","Mound","Plane", "Trough",
"Bowl Transition", "Mound Transition")
unitcolors=c(Bowl="royalblue",Mound="darkred",Plane="khaki1",Saddle="orange2",Trough="lightblue",Wall= "grey10",
`Bowl Transition`="aquamarine", `Mound Transition`="pink")
}
if(grep("Tier3",layer)==1 | attribute=="UnitForm"){
unitcats=c("Pocket Pool", "Pool", "Pond", "Margin Attached Bar", "Mid Channel Bar" ,
"Riffle", "Cascade", "Rapid", "Run-Glide", "Chute", "Transition", "Bank")
unitcolors=c(`Pocket Pool`="light blue", Pool="royalblue", Pond="dark green", `Margin Attached Bar`="darkred", `Mid Channel Bar`="brown2" ,
Riffle="orange2", Cascade="pink", Rapid="green", Chute="aquamarine" ,
`Glide-Run`="khaki1", Transition="grey90", Bank="grey10")
}
dim(grep("Tier3",layer))
grep("Tier3",layer)
length(grep("Tier3",layer))
length(grep("Tier3",layer))>0
length(grep("Tier2",layer))>0
if(length(grep("Tier2",layer))>0 | attribute=="GU"){
unitcats=c("Saddle", "Bowl","Mound","Plane", "Trough",
"Bowl Transition", "Mound Transition")
unitcolors=c(Bowl="royalblue",Mound="darkred",Plane="khaki1",Saddle="orange2",Trough="lightblue",Wall= "grey10",
`Bowl Transition`="aquamarine", `Mound Transition`="pink")
}
source(paste(Scriptpath, "/makeGUTmaps.R", sep=""))
makeGUTmaps(GUTrunlist[i], layer, figdir, unitcolors=unitcolors, plotthalweg=T, plotthalwegs=T, plotcontour=T)
source(paste(Scriptpath, "/makeGUTmaps.R", sep=""))
GU.poly
source(paste(Scriptpath, "/makeGUTmaps.R", sep=""))
source(paste(Scriptpath, "/makeGUTmaps.R", sep=""))
makeGUTmaps(GUTrunlist[i], layer, figdir, unitcolors=unitcolors, plotthalweg=T, plotthalwegs=T, plotcontour=T)
source(paste(Scriptpath, "/makeGUTmaps.R", sep=""))
makeGUTmaps(GUTrunlist[i], layer, figdir, Run, unitcolors=unitcolors, plotthalweg=T, plotthalwegs=T, plotcontour=T)
source(paste(Scriptpath, "/makeGUTmaps.R", sep=""))
makeGUTmaps(GUTrunlist[i], layer, figdir, Run, unitcolors=unitcolors, plotthalweg=T, plotthalwegs=T, plotcontour=T)
source(paste(Scriptpath, "/makeGUTmaps.R", sep=""))
makeGUTmaps(GUTrunlist[i], layer, figdir, Run, unitcolors=unitcolors, plotthalweg=T, plotthalwegs=T, plotcontour=T)
source(paste(Scriptpath, "/makeGUTmaps.R", sep=""))
makeGUTmaps(GUTrunlist[i], layer, figdir, Run, unitcolors=unitcolors, plotthalweg=T, plotthalwegs=T, plotcontour=T)
makeGUTmaps(GUTrunlist[i], layer, figdir, Run, unitcolors=unitcolors, plotthalweg=T, plotthalwegs=T, plotcontour=T)
makeGUTmaps(GUTrunlist[i], layer, figdir, Run, unitcolors=unitcolors, plotthalweg=T, plotthalwegs=T, plotcontour=T)
source(paste(Scriptpath, "/makeGUTmaps.R", sep=""))
makeGUTmaps(GUTrunlist[i], layer, figdir, Run, unitcolors=unitcolors, plotthalweg=T, plotthalwegs=T, plotcontour=T)
makeGUTmaps(GUTrunlist[i], layer, figdir, Run, unitcolors=unitcolors, plotthalweg=T, plotthalwegs=T, plotcontour=T)
source(paste(Scriptpath, "/makeGUTmaps.R", sep=""))
makeGUTmaps(GUTrunlist[i], layer, figdir, Run, unitcolors=unitcolors, plotthalweg=T, plotthalwegs=T, plotcontour=T)
visit=extractvisitfrompath(GUTrunpath)
GUTpath=strsplit(GUTrunpath, "Output")[[1]][1]
WaterExtentpath=paste(GUTrunpath, "Tier1.shp",sep="\\")
contourpath=paste(GUTpath,"EvidenceLayers", "DEM_Contours.shp", sep="\\")
GUpath=paste(GUTrunpath, "\\" , layer, ".shp",sep="")
thalwegpath=paste(GUTpath,"Inputs", "Thalweg.shp", sep="\\")
thalwegspath=paste(GUTpath,"Inputs", "Thalwegs.shp", sep="\\")
if(file.exists(WaterExtentpath)){
WE.poly=readOGR(WaterExtentpath)
if(gIsValid(WE.poly)==F){
WE.poly=gBuffer(WE.poly, byid=TRUE, width=0)
print("geometry fixed")
}
} else {print("Tier1.shp does not exist")}
#reads in contour file from evidence folder
if(plotcontour==T){
if(file.exists(contourpath)){
contours=readOGR(contourpath)
#   if(gIsValid(contour)==F){
#     contours=gBuffer(contours, byid=TRUE, width=0)
#     print("geometry fixed")
#   }
} else {print("DEM_Contours.shp does not exist")}
}
#reads in polygon of GUT output
if(file.exists(GUpath)){
GU.poly=readOGR(GUpath)
if(gIsValid(GU.poly)==F){
GU.poly=gBuffer(GU.poly, byid=TRUE, width=0)
print("geometry fixed")
}
} else {print(paste(layer, "does not exist"))}
if(plotthalweg==T){
if(file.exists(thalwegpath)){
thalwegs=readOGR(thalwegpath)
}
}
if(plotthalwegs==T){
if(file.exists(thalwegspath)){
thalwegs=readOGR(thalwegspath)
}
}
#sets colors output
if(exists("GU.poly")){
if(length(grep("Tier2",layer))>0 ){
if(is.na(unitcolors)[1]==T){
unitcats=c("Saddle", "Bowl","Mound","Plane", "Trough",
"Bowl Transition", "Mound Transition")
unitcolors=c(Bowl="royalblue",Mound="darkred",Plane="khaki1",Saddle="orange2",Trough="lightblue",Wall= "grey10",
`Bowl Transition`="aquamarine", `Mound Transition`="pink")
}
GU.poly@data$GUcolor=unitcolors[match(as.character(GU.poly@data$UnitForm), names(unitcolors))]
}
if(length(grep("Tier3",layer))>0 ){
if(is.na(unitcolors)[1]==T){
unitcats=c("Pocket Pool", "Pool", "Pond", "Margin Attached Bar", "Mid Channel Bar" ,
"Riffle", "Cascade", "Rapid", "Run-Glide", "Chute", "Transition", "Bank")
unitcolors=c(`Pocket Pool`="light blue", Pool="royalblue", Pond="dark green", `Margin Attached Bar`="darkred", `Mid Channel Bar`="brown2" ,
Riffle="orange2", Cascade="pink", Rapid="green", Chute="aquamarine" ,
`Glide-Run`="khaki1", Transition="grey90", Bank="grey10")
}
GU.poly@data$GUcolor=unitcolors[match(as.character(GU.poly@data$GU), names(unitcolors))]
}
}
par(mfrow=c(1,1))
m=plot(GU.poly, col=GU.poly@data$GUcolor)
xat <- pretty(m$range[1:2])
xlab <- paste0(xat, " E")
yat <- pretty(m$range[3:4])
ylab <- paste0(yat, " N")
m
m=plot(GU.poly, col=GU.poly@data$GUcolor)
plot(GU.poly, col=GU.poly@data$GUcolor)
GU.poly
GU.poly@data$GUcolor
.
plot(GU.poly, col=GU.poly@data$GUcolor)
m=plot(GU.poly, col=GU.poly@data$GUcolor)
m
GU.poly@coord
GU.poly
GU.poly@extent
GU.poly$extent
GU.poly$xmin
GU.poly@data
GU.poly@coord
GU.poly@coordinate
GU.poly
extent(GU.poly)
extent(GU.poly)[1:2]
xat <- pretty(extent(GU.poly)[1:2])
xlab <- paste0(xat, " E")
yat <- pretty(extent(GU.poly)[3:4])
ylab <- paste0(yat, " N")
axis(1, at=xat, labels=xlab)
axis(2, las=TRUE, at=yat, labels=ylab)
axis(3, at=xat, labels=xlab)
axis(4, las=TRUE, at=yat, labels=ylab)
par(mfrow=c(1,1), oma=c(0,0,0,6))
plot(GU.poly, col=GU.poly@data$GUcolor)
title(paste("VISIT_", visit," Tier3 GU", sep=""), cex.sub=3)
xat <- pretty(extent(GU.poly)[1:2])
xlab <- paste0(xat, " E")
yat <- pretty(extent(GU.poly)[3:4])
ylab <- paste0(yat, " N")
box()
axis(1, at=xat, labels=xlab)
axis(2, las=TRUE, at=yat, labels=ylab)
legend(par('usr')[2], par('usr')[4], bty='n',
legend=c(names(unitcolors)),  ncol=2, xpd=NA,
col=c(unitcolors),  pch=rep(15,6), pt.cex=2, cex=1.2)
par(mfrow=c(1,1), mar=c(3,4,3,0), oma=c(0,0,0,6))
plot(GU.poly, col=GU.poly@data$GUcolor)
title(paste("VISIT_", visit," Tier3 GU", sep=""), cex.sub=3)
xat <- pretty(extent(GU.poly)[1:2])
xlab <- paste0(xat, " E")
yat <- pretty(extent(GU.poly)[3:4])
ylab <- paste0(yat, " N")
box()
axis(1, at=xat, labels=xlab)
axis(2, las=TRUE, at=yat, labels=ylab)
par(mfrow=c(1,1), mar=c(3,6,3,0), oma=c(0,0,0,6))
plot(GU.poly, col=GU.poly@data$GUcolor)
title(paste("VISIT_", visit," Tier3 GU", sep=""), cex.sub=3)
#adding Coordinates
xat <- pretty(extent(GU.poly)[1:2])
xlab <- paste0(xat, " E")
yat <- pretty(extent(GU.poly)[3:4])
ylab <- paste0(yat, " N")
box()
axis(1, at=xat, labels=xlab)
axis(2, las=TRUE, at=yat, labels=ylab)
#plotting overlay data
if(exists("contours")){
plot(contours, add=T, cex=.7, col="black")}
if(exists("thalweg")){
plot(thalweg, add=T, cex=.7, lty=2, lwd=2, col="blue")}
if(exists("thalwegs")){
plot(thalwegs, add=T, cex=.7, lty=2, col="black")}
par(mfrow=c(1,1), mar=c(3,6,3,0), oma=c(0,0,0,6))
plot(GU.poly, col=GU.poly@data$GUcolor)
title(paste("VISIT", visit, run, layer, sep=" "), cex.sub=3)
#adding Coordinates
xat <- pretty(extent(GU.poly)[1:2])
xlab <- paste0(xat, " E")
yat <- pretty(extent(GU.poly)[3:4])
ylab <- paste0(yat, " N")
box()
axis(1, at=xat, labels=xlab)
axis(2, las=TRUE, at=yat, labels=ylab)
#plotting overlay data
if(exists("contours")){
plot(contours, add=T, cex=.7, col="black")}
if(exists("thalweg")){
plot(thalweg, add=T, cex=.7, lty=2, lwd=2, col="blue")}
if(exists("thalwegs")){
plot(thalwegs, add=T, cex=.7, lty=2, col="black")}
title(paste("VISIT", visit, run, layer, sep=" "), cex.sub=3)
title(paste("VISIT", visit, Run, layer, sep=" "), cex.sub=3)
#plotting overlay data
if(exists("contours")){
plot(contours, add=T, cex=.7, col="black")}
if(exists("thalweg")){
plot(thalweg, add=T, cex=.7, lty=2, lwd=2, col="blue")}
if(exists("thalwegs")){
plot(thalwegs, add=T, cex=.7, lty=2, col="black")}
legend(par('usr')[2], par('usr')[4], bty='n',
legend=c(names(unitcolors)),  ncol=2, xpd=NA,
col=c(unitcolors),  pch=rep(15,6), pt.cex=2, cex=1.2)
figdir=paste(localdir, "ExampleData\\Figures", sep="\\")
figdir=paste(localdir, "ExampleData\\Figures", sep="\\")
figdir
source(paste(Scriptpath, "/makeGUTmaps.R", sep=""))
makeGUTmaps(GUTrunlist[i], layer, figdir, Run, unitcolors=unitcolors, plotthalweg=T, plotthalwegs=T, plotcontour=T)
figdir
paste(figdir,"\\" ,"map", layer, Run ,visit,".pdf", sep="")
makeGUTmaps(GUTrunlist[i], layer, figdir, Run, unitcolors=unitcolors, plotthalweg=T, plotthalwegs=T, plotcontour=T)
#set your local working directory:
localdir='E:\\GitHub\\PyGUT\\SupportingTools'
#folder where all the data is contained
Datapath=paste(localdir,"ExampleData\\VisitData",sep="\\")
#folder where you want your output summary data to go
Metricpath=paste(localdir,"ExampleData\\Metrics",sep="\\")
#folder containing the scripts which run the summaries
Scriptpath=paste(localdir,"GUTsummary", sep="\\")
#folder where you want any output figures to go
figdir=paste(localdir, "ExampleData\\Figures", sep="\\")
Run="Run_01"  #Specify selection criteria for which GUT run(s) you want to summarize.
layer="Tier2_InChannel" #Specify which GUT output layer you want to summarize
attribute="UnitForm" #Specify the field name of the GUT field you are wanting to summarize over
GUTrunlist=list.dirs(Datapath)[grep(Run,list.dirs(Datapath))]
GUTrunlist
source(paste(Scriptpath, "extractvisitfrompath.R", sep="/"))
source(paste(Scriptpath, "/makeGUTmaps.R", sep=""))
for (i in c(1:length(GUTrunlist))){
#for (i in runlist){
print(i)
makeGUTmaps(GUTrunlist[i], layer, figdir, Run, unitcolors=unitcolors, plotthalweg=T, plotthalwegs=T, plotcontour=T)
}
if(length(grep("Tier2",layer))>0 | attribute=="GU"){
unitcats=c("Saddle", "Bowl","Mound","Plane", "Trough",
"Bowl Transition", "Mound Transition")
unitcolors=c(Bowl="royalblue",Mound="darkred",Plane="khaki1",Saddle="orange2",Trough="lightblue",Wall= "grey10",
`Bowl Transition`="aquamarine", `Mound Transition`="pink")
}
if(length(grep("Tier3",layer))>0 | attribute=="UnitForm"){
unitcats=c("Pocket Pool", "Pool", "Pond", "Margin Attached Bar", "Mid Channel Bar" ,
"Riffle", "Cascade", "Rapid", "Run-Glide", "Chute", "Transition", "Bank")
unitcolors=c(`Pocket Pool`="light blue", Pool="royalblue", Pond="dark green", `Margin Attached Bar`="darkred", `Mid Channel Bar`="brown2" ,
Riffle="orange2", Cascade="pink", Rapid="green", Chute="aquamarine" ,
`Glide-Run`="khaki1", Transition="grey90", Bank="grey10")
}
source(paste(Scriptpath, "/makeGUTmaps.R", sep=""))
#you have to be connected to the internet for this to work due to a package dependency.  Sorry.
for (i in c(1:length(GUTrunlist))){
#for (i in runlist){
print(i)
makeGUTmaps(GUTrunlist[i], layer, figdir, Run, unitcolors=unitcolors, plotthalweg=T, plotthalwegs=T, plotcontour=T)
}
source(paste(Scriptpath, "/makesiteGUTmetrics.R", sep=""))
source(paste(Scriptpath, "/makeGUTmaps.R", sep=""))
for (i in c(1:length(GUTrunlist))){
#for (i in runlist){
print(i)
makeGUTmaps(GUTrunlist[i], layer, figdir, Run, unitcolors=unitcolors, plotthalweg=T, plotthalwegs=T, plotcontour=T)
}
source(paste(Scriptpath, "/makeGUTmaps.R", sep=""))
#you have to be connected to the internet for this to work due to a package dependency.  Sorry.
for (i in c(1:length(GUTrunlist))){
#for (i in runlist){
print(i)
makeGUTmaps(GUTrunlist[i], layer, figdir, Run, unitcolors=unitcolors, plotthalweg=T, plotthalwegs=T, plotcontour=T)
}
source(paste(Scriptpath, "/makesiteGUTunitmetrics.R", sep=""))
source(paste(Scriptpath, "/makeGUTmaps.R", sep=""))
for (i in c(1:length(GUTrunlist))){
#for (i in runlist){
print(i)
makeGUTmaps(GUTrunlist[i], layer, figdir, Run, unitcolors=unitcolors, plotthalweg=T, plotthalwegs=T, plotcontour=T)
}
source(paste(Scriptpath, "/makeGUTmaps.R", sep=""))
for (i in c(1:length(GUTrunlist))){
#for (i in runlist){
print(i)
makeGUTmaps(GUTrunlist[i], layer, figdir, Run, unitcolors=unitcolors, plotthalweg=T, plotthalwegs=T, plotcontour=T)
}
if(length(grep("Tier2",layer))>0 | attribute=="Unitform"){
unitcats=c("Saddle", "Bowl","Mound","Plane", "Trough",
"Bowl Transition", "Mound Transition")
unitcolors=c(Bowl="royalblue",Mound="darkred",Plane="khaki1",Saddle="orange2",Trough="lightblue",Wall= "grey10",
`Bowl Transition`="aquamarine", `Mound Transition`="pink")
}
if(length(grep("Tier3",layer))>0 | attribute=="GU"){
unitcats=c("Pocket Pool", "Pool", "Pond", "Margin Attached Bar", "Mid Channel Bar" ,
"Riffle", "Cascade", "Rapid", "Run-Glide", "Chute", "Transition", "Bank")
unitcolors=c(`Pocket Pool`="light blue", Pool="royalblue", Pond="dark green", `Margin Attached Bar`="darkred", `Mid Channel Bar`="brown2" ,
Riffle="orange2", Cascade="pink", Rapid="green", Chute="aquamarine" ,
`Glide-Run`="khaki1", Transition="grey90", Bank="grey10")
}
for (i in c(1:length(GUTrunlist))){
#for (i in runlist){
print(i)
makeGUTmaps(GUTrunlist[i], layer, figdir, Run, unitcolors=unitcolors, plotthalweg=T, plotthalwegs=T, plotcontour=T)
}
layer="Tier2_InChannel_Transition" #Specify which GUT output layer you want to summarize
if(length(grep("Tier2",layer))>0 | attribute=="Unitform"){
unitcats=c("Saddle", "Bowl","Mound","Plane", "Trough",
"Bowl Transition", "Mound Transition")
unitcolors=c(Bowl="royalblue",Mound="darkred",Plane="khaki1",Saddle="orange2",Trough="lightblue",Wall= "grey10",
`Bowl Transition`="aquamarine", `Mound Transition`="pink")
}
if(length(grep("Tier3",layer))>0 | attribute=="GU"){
unitcats=c("Pocket Pool", "Pool", "Pond", "Margin Attached Bar", "Mid Channel Bar" ,
"Riffle", "Cascade", "Rapid", "Run-Glide", "Chute", "Transition", "Bank")
unitcolors=c(`Pocket Pool`="light blue", Pool="royalblue", Pond="dark green", `Margin Attached Bar`="darkred", `Mid Channel Bar`="brown2" ,
Riffle="orange2", Cascade="pink", Rapid="green", Chute="aquamarine" ,
`Glide-Run`="khaki1", Transition="grey90", Bank="grey10")
}
source(paste(Scriptpath, "/makeGUTmaps.R", sep=""))
#you have to be connected to the internet for this to work due to a package dependency.  Sorry.
for (i in c(1:length(GUTrunlist))){
#for (i in runlist){
print(i)
makeGUTmaps(GUTrunlist[i], layer, figdir, Run, unitcolors=unitcolors, plotthalweg=T, plotthalwegs=T, plotcontour=T)
}
source(paste(Scriptpath, "/makeGUTmaps.R", sep=""))
#you have to be connected to the internet for this to work due to a package dependency.  Sorry.
for (i in c(1:length(GUTrunlist))){
#for (i in runlist){
print(i)
makeGUTmaps(GUTrunlist[i], layer, figdir, Run, plotthalweg=T, plotthalwegs=T, plotcontour=T)
}
source(paste(Scriptpath, "/makeGUTmaps.R", sep=""))
#you have to be connected to the internet for this to work due to a package dependency.  Sorry.
for (i in c(1:length(GUTrunlist))){
#for (i in runlist){
print(i)
makeGUTmaps(GUTrunlist[i], layer, figdir, Run, plotthalweg=T, plotthalwegs=T, plotcontour=T)
}
source(paste(Scriptpath, "/makeGUTmaps.R", sep=""))
#you have to be connected to the internet for this to work due to a package dependency.  Sorry.
for (i in c(1:length(GUTrunlist))){
#for (i in runlist){
print(i)
makeGUTmaps(GUTrunlist[i], layer, figdir, Run, plotthalweg=T, plotthalwegs=T, plotcontour=T)
}
source(paste(Scriptpath, "/makesiteGUTunitmetrics.R", sep=""))
for (i in c(1:length(GUTrunlist))){
v=makesiteGUTunitmetrics(GUTrunlist[i], layer, attribute=attribute, unitcats=unitcats)
if (i==1){metrics=v} else {metrics=rbind(metrics,v)}
}
unitcats=c("Saddle", "Bowl","Mound","Plane", "Trough",
"Bowl Transition", "Mound Transition")
v=makesiteGUTunitmetrics(GUTrunlist[i], layer, attribute=attribute, unitcats=unitcats)
paste(layer, ".shp",sep="")
paste(GUTrunpath, paste(layer, ".shp",sep=""), sep="\\")
source(paste(Scriptpath, "/makesiteGUTunitmetrics.R", sep=""))
for (i in c(1:length(GUTrunlist))){
v=makesiteGUTunitmetrics(GUTrunlist[i], layer, attribute=attribute, unitcats=unitcats)
if (i==1){metrics=v} else {metrics=rbind(metrics,v)}
}
metrics
metrics1=as.data.frame(metrics)
if((length(grep("exist", metrics1$Unit))>0)==T){metrics1[-grep("exist", metrics1$Unit),]} #cleans out lines printing that they didn't exist
metrics1[which(metrics1$n==1),]$sdArea=0 #sets sd to zero for items with only one value
metrics1[which(metrics1$n==1),]$sdPerim=0 #sets sd to zero for items with only one value
metrics1
which(metrics1$n==1)
if(length(which(metrics1$n==1))>0){
metrics1[which(metrics1$n==1),]$sdArea=0 #sets sd to zero for items with only one value
metrics1[which(metrics1$n==1),]$sdPerim=0 #sets sd to zero for items with only one value
}
write.csv(metrics1, paste(Metricpath, "\\siteGUTunitmetrics_", Run, layer, ".csv" ,sep=""), row.names=F)
source(paste(Scriptpath, "/makesiteGUTmetrics.R", sep=""))
source(paste(Scriptpath, "/intersectpts.R", sep=""))
#you have to be connected to the internet for this to work due to a package dependency.  Sorry.
for (i in c(1:length(GUTrunlist))){
#for (i in runlist){
print(i)
v=makesiteGUTmetrics(GUTrunlist[i], layer)
if (i==1){metrics=v} else {metrics=rbind(metrics,v)}
}
metrics
rownames(metrics)=seq(1,length(GUTrunlist))
metrics1=as.data.frame(metrics)
metrics1
write.csv(metrics1, paste(Metricpath, "\\siteGUTmetrics_", Run, layer, ".csv" ,sep=""), row.names=F)
source(paste(Scriptpath, "/makesiteGUTunitmetrics.R", sep=""))
for (i in c(1:length(GUTrunlist))){
v=makesiteGUTunitmetrics(GUTrunlist[i], layer, attribute=attribute, unitcats=unitcats)
if (i==1){metrics=v} else {metrics=rbind(metrics,v)}
}
#cleans up data a little bit before export
metrics2=as.data.frame(metrics)
if((length(grep("exist", metrics2$Unit))>0)==T){metrics2[-grep("exist", metrics2$Unit),]} #cleans out lines printing that they didn't exist
if(length(which(metrics2$n==1))>0){
metrics2[which(metrics2$n==1),]$sdArea=0 #sets sd to zero for items with only one value
metrics2[which(metrics2$n==1),]$sdPerim=0 #sets sd to zero for items with only one value
}
write.csv(metrics2, paste(Metricpath, "\\siteGUTunitmetrics_", Run, layer, ".csv" ,sep=""), row.names=F)
